import React, { useState } from 'react';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { AlertCircle, Ambulance, Clock, Hospital, MapPin, Phone, User } from 'lucide-react';

const PATH = () => {
  // App State
  const [userType, setUserType] = useState('hospital');
  const [transportRequests, setTransportRequests] = useState([
    {
      id: 'TR-1001',
      hospitalName: 'Memorial General Hospital',
      patientName: 'John Doe',
      urgency: 'Medium',
      pickupLocation: 'Emergency Department, Floor 1',
      destination: 'City Specialists Center',
      specialRequirements: 'Oxygen support required',
      requestTime: '10:30 AM',
      status: 'Open',
      bids: [
        { companyName: 'FastMed Transport', estimatedArrival: '15 mins', price: '$350', selected: false },
        { companyName: 'City Ambulance Services', estimatedArrival: '12 mins', price: '$375', selected: false }
      ]
    },
    {
      id: 'TR-1002',
      hospitalName: 'University Medical Center',
      patientName: 'Sarah Johnson',
      urgency: 'High',
      pickupLocation: 'ICU, Floor 3',
      destination: 'Regional Burn Center',
      specialRequirements: 'Critical care equipment, burn specialist on board',
      requestTime: '11:15 AM',
      status: 'Open',
      bids: []
    }
  ]);

  // New request form state
  const [newRequest, setNewRequest] = useState({
    patientName: '',
    urgency: 'Medium',
    pickupLocation: '',
    destination: '',
    specialRequirements: ''
  });

  // New bid form state
  const [newBid, setNewBid] = useState({
    requestId: '',
    estimatedArrival: '',
    price: ''
  });

  // Handle form inputs for new transport request
  const handleRequestInputChange = (e) => {
    const { name, value } = e.target;
    setNewRequest(prev => ({ ...prev, [name]: value }));
  };

  // Handle select changes for new transport request
  const handleRequestSelectChange = (name, value) => {
    setNewRequest(prev => ({ ...prev, [name]: value }));
  };

  // Submit new transport request
  const submitTransportRequest = () => {
    // Validation
    if (!newRequest.patientName || !newRequest.pickupLocation || !newRequest.destination) {
      alert('Please fill all required fields');
      return;
    }

    const newTransportRequest = {
      id: `TR-${1003 + transportRequests.length}`,
      hospitalName: 'Your Hospital',
      patientName: newRequest.patientName,
      urgency: newRequest.urgency,
      pickupLocation: newRequest.pickupLocation,
      destination: newRequest.destination,
      specialRequirements: newRequest.specialRequirements,
      requestTime: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      status: 'Open',
      bids: []
    };

    setTransportRequests([newTransportRequest, ...transportRequests]);
    
    // Reset form
    setNewRequest({
      patientName: '',
      urgency: 'Medium',
      pickupLocation: '',
      destination: '',
      specialRequirements: ''
    });
  };

  // Submit bid on transport request
  const submitBid = (requestId) => {
    if (!newBid.estimatedArrival || !newBid.price) {
      alert('Please provide estimated arrival time and price');
      return;
    }

    setTransportRequests(prev => prev.map(request => {
      if (request.id === requestId) {
        return {
          ...request,
          bids: [
            ...request.bids,
            {
              companyName: 'Your Ambulance Service',
              estimatedArrival: newBid.estimatedArrival,
              price: newBid.price,
              selected: false
            }
          ]
        };
      }
      return request;
    }));

    setNewBid({
      requestId: '',
      estimatedArrival: '',
      price: ''
    });
  };

  // Accept a bid (for hospital view)
  const acceptBid = (requestId, bidIndex) => {
    setTransportRequests(prev => prev.map(request => {
      if (request.id === requestId) {
        const updatedBids = request.bids.map((bid, idx) => ({
          ...bid,
          selected: idx === bidIndex
        }));
        
        return {
          ...request,
          status: 'Assigned',
          bids: updatedBids
        };
      }
      return request;
    }));
  };

  // Function to get urgency badge color
  const getUrgencyColor = (urgency) => {
    switch (urgency) {
      case 'High': return 'bg-red-500';
      case 'Medium': return 'bg-yellow-500';
      case 'Low': return 'bg-green-500';
      default: return 'bg-blue-500';
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 py-4">
        <div className="container mx-auto px-4 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <Ambulance className="h-6 w-6 text-blue-600" />
            <h1 className="text-2xl font-bold text-blue-700">PATH</h1>
            <span className="text-sm text-gray-500">Patient Transport Hub</span>
          </div>
          
          <div className="flex space-x-4">
            <Button 
              variant={userType === 'hospital' ? "default" : "outline"}
              onClick={() => setUserType('hospital')}
              className="flex items-center"
            >
              <Hospital className="mr-2 h-4 w-4" />
              Hospital
            </Button>
            <Button 
              variant={userType === 'ambulance' ? "default" : "outline"}
              onClick={() => setUserType('ambulance')}
              className="flex items-center"
            >
              <Ambulance className="mr-2 h-4 w-4" />
              Ambulance Service
            </Button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 container mx-auto px-4 py-8">
        {userType === 'hospital' ? (
          <div>
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4">Request Patient Transport</h2>
              <Card>
                <CardContent className="pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="patientName">Patient Name</Label>
                      <Input 
                        id="patientName" 
                        name="patientName"
                        placeholder="Enter patient name" 
                        value={newRequest.patientName}
                        onChange={handleRequestInputChange}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="urgency">Urgency</Label>
                      <Select 
                        value={newRequest.urgency} 
                        onValueChange={(value) => handleRequestSelectChange('urgency', value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select urgency" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Low">Low</SelectItem>
                          <SelectItem value="Medium">Medium</SelectItem>
                          <SelectItem value="High">High</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="pickupLocation">Pickup Location</Label>
                      <Input 
                        id="pickupLocation" 
                        name="pickupLocation"
                        placeholder="e.g. Emergency Room, Floor 2" 
                        value={newRequest.pickupLocation}
                        onChange={handleRequestInputChange}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="destination">Destination</Label>
                      <Input 
                        id="destination" 
                        name="destination"
                        placeholder="e.g. City General Hospital" 
                        value={newRequest.destination}
                        onChange={handleRequestInputChange}
                      />
                    </div>
                    
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="specialRequirements">Special Requirements</Label>
                      <Input 
                        id="specialRequirements" 
                        name="specialRequirements"
                        placeholder="e.g. Oxygen support, special equipment" 
                        value={newRequest.specialRequirements}
                        onChange={handleRequestInputChange}
                      />
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-end">
                  <Button onClick={submitTransportRequest}>Submit Transport Request</Button>
                </CardFooter>
              </Card>
            </div>
            
            <div>
              <h2 className="text-xl font-semibold mb-4">Your Transport Requests</h2>
              <div className="space-y-4">
                {transportRequests.map(request => (
                  <Card key={request.id} className="overflow-hidden">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="flex items-center">
                            {request.id}: {request.patientName}
                            <Badge className={`ml-2 ${getUrgencyColor(request.urgency)}`}>
                              {request.urgency}
                            </Badge>
                          </CardTitle>
                          <CardDescription>Requested at {request.requestTime}</CardDescription>
                        </div>
                        <Badge variant={request.status === 'Open' ? 'outline' : 'default'}>
                          {request.status}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="pb-2">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2 text-gray-500" />
                          <span>From: {request.pickupLocation}</span>
                        </div>
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2 text-gray-500" />
                          <span>To: {request.destination}</span>
                        </div>
                        {request.specialRequirements && (
                          <div className="md:col-span-2 flex items-center">
                            <AlertCircle className="h-4 w-4 mr-2 text-gray-500" />
                            <span>Requirements: {request.specialRequirements}</span>
                          </div>
                        )}
                      </div>
                    </CardContent>
                    
                    {request.bids.length > 0 && (
                      <div className="px-6 py-2 bg-gray-50">
                        <h4 className="font-medium text-sm mb-2">Bids ({request.bids.length})</h4>
                        <div className="space-y-2">
                          {request.bids.map((bid, bidIndex) => (
                            <div key={bidIndex} className="flex items-center justify-between bg-white p-2 rounded border">
                              <div>
                                <div className="font-medium">{bid.companyName}</div>
                                <div className="text-sm flex space-x-4">
                                  <span className="flex items-center">
                                    <Clock className="h-3 w-3 mr-1 text-gray-500" />
                                    {bid.estimatedArrival}
                                  </span>
                                  <span>{bid.price}</span>
                                </div>
                              </div>
                              {bid.selected ? (
                                <Badge className="bg-green-500">Selected</Badge>
                              ) : (
                                request.status === 'Open' && (
                                  <Button size="sm" onClick={() => acceptBid(request.id, bidIndex)}>
                                    Accept Bid
                                  </Button>
                                )
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </Card>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <div>
            <h2 className="text-xl font-semibold mb-4">Available Transport Requests</h2>
            <div className="space-y-4">
              {transportRequests.filter(r => r.status === 'Open').map(request => (
                <Card key={request.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="flex items-center">
                          {request.id}
                          <Badge className={`ml-2 ${getUrgencyColor(request.urgency)}`}>
                            {request.urgency}
                          </Badge>
                        </CardTitle>
                        <CardDescription>Hospital: {request.hospitalName}</CardDescription>
                      </div>
                      <div className="text-sm text-gray-500">{request.requestTime}</div>
                    </div>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-2 text-gray-500" />
                        <span>Patient: {request.patientName}</span>
                      </div>
                      <div className="flex items-center">
                        <MapPin className="h-4 w-4 mr-2 text-gray-500" />
                        <span>From: {request.pickupLocation}</span>
                      </div>
                      <div className="flex items-center">
                        <MapPin className="h-4 w-4 mr-2 text-gray-500" />
                        <span>To: {request.destination}</span>
                      </div>
                      {request.specialRequirements && (
                        <div className="flex items-center">
                          <AlertCircle className="h-4 w-4 mr-2 text-gray-500" />
                          <span>Requirements: {request.specialRequirements}</span>
                        </div>
                      )}
                    </div>
                  </CardContent>
                  
                  <div className="px-6 py-4 bg-gray-50">
                    <h4 className="font-medium text-sm mb-2">Place Your Bid</h4>
                    <div className="flex flex-col md:flex-row gap-2">
                      <Input 
                        placeholder="Est. arrival (e.g. 15 mins)" 
                        value={newBid.requestId === request.id ? newBid.estimatedArrival : ''}
                        onChange={(e) => setNewBid({
                          requestId: request.id,
                          estimatedArrival: e.target.value,
                          price: newBid.requestId === request.id ? newBid.price : ''
                        })}
                      />
                      <Input 
                        placeholder="Price (e.g. $350)" 
                        value={newBid.requestId === request.id ? newBid.price : ''}
                        onChange={(e) => setNewBid({
                          requestId: request.id,
                          estimatedArrival: newBid.requestId === request.id ? newBid.estimatedArrival : '',
                          price: e.target.value
                        })}
                      />
                      <Button onClick={() => submitBid(request.id)}>Submit Bid</Button>
                    </div>
                    
                    {request.bids.some(bid => bid.companyName === 'Your Ambulance Service') && (
                      <div className="mt-2 text-sm text-green-600">
                        You have already placed a bid on this request.
                      </div>
                    )}
                  </div>
                  
                  {request.bids.length > 0 && (
                    <div className="px-6 py-2 bg-white border-t">
                      <h4 className="font-medium text-sm mb-2">Current Bids ({request.bids.length})</h4>
                      <div className="space-y-2">
                        {request.bids.map((bid, bidIndex) => (
                          <div key={bidIndex} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                            <div>
                              <div className="font-medium">{bid.companyName}</div>
                              <div className="text-sm flex space-x-4">
                                <span className="flex items-center">
                                  <Clock className="h-3 w-3 mr-1 text-gray-500" />
                                  {bid.estimatedArrival}
                                </span>
                                <span>{bid.price}</span>
                              </div>
                            </div>
                            {bid.selected && <Badge className="bg-green-500">Selected</Badge>}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </Card>
              ))}
              
              {transportRequests.filter(r => r.status === 'Open').length === 0 && (
                <Card className="p-8 text-center">
                  <div className="text-gray-500">No open transport requests available at this time.</div>
                </Card>
              )}
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 py-4">
        <div className="container mx-auto px-4 text-center text-gray-500 text-sm">
          <div className="flex justify-center space-x-4 mb-2">
            <div className="flex items-center">
              <Phone className="h-4 w-4 mr-1" />
              Support: (800) 555-PATH
            </div>
            <div>© 2025 PATH - Patient Ambulance Transport Hub</div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default PATH;